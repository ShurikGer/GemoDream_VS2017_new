//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace gemoDream.gemoDreamService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GdrServiceSoap", Namespace="http://tempuri.org/")]
    public partial class GdrService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsoleLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfficeDepartmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfficeCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDepartmentOfficeIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCorelFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenericGetByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenericGetProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenericSetProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback QBAddInvoiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailCancelledDocsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBatchByFaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBatchByFax1OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddGraderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPricesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGraderDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGraderKeymapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceCfgParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveFileToSendDirOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeasuresFormatsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AsincPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakeTextFile3OperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintExcelReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GdrService() {
            this.Url = global::gemoDream.Properties.Settings.Default.ClientLibrary_localhost_GdrService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event ConsoleLoginCompletedEventHandler ConsoleLoginCompleted;
        
        /// <remarks/>
        public event GetOfficeDepartmentsCompletedEventHandler GetOfficeDepartmentsCompleted;
        
        /// <remarks/>
        public event GetOfficeCodeCompletedEventHandler GetOfficeCodeCompleted;
        
        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;
        
        /// <remarks/>
        public event SetDepartmentOfficeIdCompletedEventHandler SetDepartmentOfficeIdCompleted;
        
        /// <remarks/>
        public event GetImageCompletedEventHandler GetImageCompleted;
        
        /// <remarks/>
        public event GetCorelFileCompletedEventHandler GetCorelFileCompleted;
        
        /// <remarks/>
        public event GenericGetByIdCompletedEventHandler GenericGetByIdCompleted;
        
        /// <remarks/>
        public event GenericGetProcedureCompletedEventHandler GenericGetProcedureCompleted;
        
        /// <remarks/>
        public event GenericSetProcedureCompletedEventHandler GenericSetProcedureCompleted;
        
        /// <remarks/>
        public event QBAddInvoiceCompletedEventHandler QBAddInvoiceCompleted;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        public event SendMailCancelledDocsCompletedEventHandler SendMailCancelledDocsCompleted;
        
        /// <remarks/>
        public event SendBatchByFaxCompletedEventHandler SendBatchByFaxCompleted;
        
        /// <remarks/>
        public event SendBatchByFax1CompletedEventHandler SendBatchByFax1Completed;
        
        /// <remarks/>
        public event SendDocumentCompletedEventHandler SendDocumentCompleted;
        
        /// <remarks/>
        public event AddGraderDataCompletedEventHandler AddGraderDataCompleted;
        
        /// <remarks/>
        public event AddPricesCompletedEventHandler AddPricesCompleted;
        
        /// <remarks/>
        public event GetGraderDirCompletedEventHandler GetGraderDirCompleted;
        
        /// <remarks/>
        public event GetGraderKeymapCompletedEventHandler GetGraderKeymapCompleted;
        
        /// <remarks/>
        public event GetServiceCfgParameterCompletedEventHandler GetServiceCfgParameterCompleted;
        
        /// <remarks/>
        public event MoveFileToSendDirCompletedEventHandler MoveFileToSendDirCompleted;
        
        /// <remarks/>
        public event GetMeasuresFormatsCompletedEventHandler GetMeasuresFormatsCompleted;
        
        /// <remarks/>
        public event AsincPrintCompletedEventHandler AsincPrintCompleted;
        
        /// <remarks/>
        public event MakeTextFile3CompletedEventHandler MakeTextFile3Completed;
        
        /// <remarks/>
        public event PrintExcelReportCompletedEventHandler PrintExcelReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string sLogin, string sPassword, int iDepartment, int iDepartmentOffice, out System.Data.DataSet dsAccess) {
            object[] results = this.Invoke("Login", new object[] {
                        sLogin,
                        sPassword,
                        iDepartment,
                        iDepartmentOffice});
            dsAccess = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogin(string sLogin, string sPassword, int iDepartment, int iDepartmentOffice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        sLogin,
                        sPassword,
                        iDepartment,
                        iDepartmentOffice}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLogin(System.IAsyncResult asyncResult, out System.Data.DataSet dsAccess) {
            object[] results = this.EndInvoke(asyncResult);
            dsAccess = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string sLogin, string sPassword, int iDepartment, int iDepartmentOffice) {
            this.LoginAsync(sLogin, sPassword, iDepartment, iDepartmentOffice, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string sLogin, string sPassword, int iDepartment, int iDepartmentOffice, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        sLogin,
                        sPassword,
                        iDepartment,
                        iDepartmentOffice}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConsoleLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConsoleLogin(string sLogin, string sPassword, out System.Data.DataSet dsAccess) {
            object[] results = this.Invoke("ConsoleLogin", new object[] {
                        sLogin,
                        sPassword});
            dsAccess = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleLogin(string sLogin, string sPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleLogin", new object[] {
                        sLogin,
                        sPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndConsoleLogin(System.IAsyncResult asyncResult, out System.Data.DataSet dsAccess) {
            object[] results = this.EndInvoke(asyncResult);
            dsAccess = ((System.Data.DataSet)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConsoleLoginAsync(string sLogin, string sPassword) {
            this.ConsoleLoginAsync(sLogin, sPassword, null);
        }
        
        /// <remarks/>
        public void ConsoleLoginAsync(string sLogin, string sPassword, object userState) {
            if ((this.ConsoleLoginOperationCompleted == null)) {
                this.ConsoleLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsoleLoginOperationCompleted);
            }
            this.InvokeAsync("ConsoleLogin", new object[] {
                        sLogin,
                        sPassword}, this.ConsoleLoginOperationCompleted, userState);
        }
        
        private void OnConsoleLoginOperationCompleted(object arg) {
            if ((this.ConsoleLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsoleLoginCompleted(this, new ConsoleLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOfficeDepartments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetOfficeDepartments(int iOfficeCode) {
            object[] results = this.Invoke("GetOfficeDepartments", new object[] {
                        iOfficeCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOfficeDepartments(int iOfficeCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOfficeDepartments", new object[] {
                        iOfficeCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetOfficeDepartments(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetOfficeDepartmentsAsync(int iOfficeCode) {
            this.GetOfficeDepartmentsAsync(iOfficeCode, null);
        }
        
        /// <remarks/>
        public void GetOfficeDepartmentsAsync(int iOfficeCode, object userState) {
            if ((this.GetOfficeDepartmentsOperationCompleted == null)) {
                this.GetOfficeDepartmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfficeDepartmentsOperationCompleted);
            }
            this.InvokeAsync("GetOfficeDepartments", new object[] {
                        iOfficeCode}, this.GetOfficeDepartmentsOperationCompleted, userState);
        }
        
        private void OnGetOfficeDepartmentsOperationCompleted(object arg) {
            if ((this.GetOfficeDepartmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfficeDepartmentsCompleted(this, new GetOfficeDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOfficeCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOfficeCode() {
            object[] results = this.Invoke("GetOfficeCode", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOfficeCode(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOfficeCode", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetOfficeCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOfficeCodeAsync() {
            this.GetOfficeCodeAsync(null);
        }
        
        /// <remarks/>
        public void GetOfficeCodeAsync(object userState) {
            if ((this.GetOfficeCodeOperationCompleted == null)) {
                this.GetOfficeCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfficeCodeOperationCompleted);
            }
            this.InvokeAsync("GetOfficeCode", new object[0], this.GetOfficeCodeOperationCompleted, userState);
        }
        
        private void OnGetOfficeCodeOperationCompleted(object arg) {
            if ((this.GetOfficeCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfficeCodeCompleted(this, new GetOfficeCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logoff", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logoff(string sSessionId) {
            this.Invoke("Logoff", new object[] {
                        sSessionId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogoff(string sSessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logoff", new object[] {
                        sSessionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogoff(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LogoffAsync(string sSessionId) {
            this.LogoffAsync(sSessionId, null);
        }
        
        /// <remarks/>
        public void LogoffAsync(string sSessionId, object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[] {
                        sSessionId}, this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDepartmentOfficeId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDepartmentOfficeId(int DepartmentOfficeID, string sSessionId) {
            object[] results = this.Invoke("SetDepartmentOfficeId", new object[] {
                        DepartmentOfficeID,
                        sSessionId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetDepartmentOfficeId(int DepartmentOfficeID, string sSessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetDepartmentOfficeId", new object[] {
                        DepartmentOfficeID,
                        sSessionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSetDepartmentOfficeId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDepartmentOfficeIdAsync(int DepartmentOfficeID, string sSessionId) {
            this.SetDepartmentOfficeIdAsync(DepartmentOfficeID, sSessionId, null);
        }
        
        /// <remarks/>
        public void SetDepartmentOfficeIdAsync(int DepartmentOfficeID, string sSessionId, object userState) {
            if ((this.SetDepartmentOfficeIdOperationCompleted == null)) {
                this.SetDepartmentOfficeIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDepartmentOfficeIdOperationCompleted);
            }
            this.InvokeAsync("SetDepartmentOfficeId", new object[] {
                        DepartmentOfficeID,
                        sSessionId}, this.SetDepartmentOfficeIdOperationCompleted, userState);
        }
        
        private void OnSetDepartmentOfficeIdOperationCompleted(object arg) {
            if ((this.SetDepartmentOfficeIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDepartmentOfficeIdCompleted(this, new SetDepartmentOfficeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetImage(string sFileName) {
            object[] results = this.Invoke("GetImage", new object[] {
                        sFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetImage(string sFileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetImage", new object[] {
                        sFileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetImage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageAsync(string sFileName) {
            this.GetImageAsync(sFileName, null);
        }
        
        /// <remarks/>
        public void GetImageAsync(string sFileName, object userState) {
            if ((this.GetImageOperationCompleted == null)) {
                this.GetImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageOperationCompleted);
            }
            this.InvokeAsync("GetImage", new object[] {
                        sFileName}, this.GetImageOperationCompleted, userState);
        }
        
        private void OnGetImageOperationCompleted(object arg) {
            if ((this.GetImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageCompleted(this, new GetImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCorelFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCorelFile(string sSessionId, string sFileName) {
            object[] results = this.Invoke("GetCorelFile", new object[] {
                        sSessionId,
                        sFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCorelFile(string sSessionId, string sFileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCorelFile", new object[] {
                        sSessionId,
                        sFileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCorelFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCorelFileAsync(string sSessionId, string sFileName) {
            this.GetCorelFileAsync(sSessionId, sFileName, null);
        }
        
        /// <remarks/>
        public void GetCorelFileAsync(string sSessionId, string sFileName, object userState) {
            if ((this.GetCorelFileOperationCompleted == null)) {
                this.GetCorelFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCorelFileOperationCompleted);
            }
            this.InvokeAsync("GetCorelFile", new object[] {
                        sSessionId,
                        sFileName}, this.GetCorelFileOperationCompleted, userState);
        }
        
        private void OnGetCorelFileOperationCompleted(object arg) {
            if ((this.GetCorelFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCorelFileCompleted(this, new GetCorelFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenericGetById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GenericGetById(string sSessionId, string sId, string sName) {
            object[] results = this.Invoke("GenericGetById", new object[] {
                        sSessionId,
                        sId,
                        sName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGenericGetById(string sSessionId, string sId, string sName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenericGetById", new object[] {
                        sSessionId,
                        sId,
                        sName}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGenericGetById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GenericGetByIdAsync(string sSessionId, string sId, string sName) {
            this.GenericGetByIdAsync(sSessionId, sId, sName, null);
        }
        
        /// <remarks/>
        public void GenericGetByIdAsync(string sSessionId, string sId, string sName, object userState) {
            if ((this.GenericGetByIdOperationCompleted == null)) {
                this.GenericGetByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenericGetByIdOperationCompleted);
            }
            this.InvokeAsync("GenericGetById", new object[] {
                        sSessionId,
                        sId,
                        sName}, this.GenericGetByIdOperationCompleted, userState);
        }
        
        private void OnGenericGetByIdOperationCompleted(object arg) {
            if ((this.GenericGetByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenericGetByIdCompleted(this, new GenericGetByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenericGetProcedure", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GenericGetProcedure(string sSessionId, System.Data.DataSet dsParameters) {
            object[] results = this.Invoke("GenericGetProcedure", new object[] {
                        sSessionId,
                        dsParameters});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGenericGetProcedure(string sSessionId, System.Data.DataSet dsParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenericGetProcedure", new object[] {
                        sSessionId,
                        dsParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGenericGetProcedure(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GenericGetProcedureAsync(string sSessionId, System.Data.DataSet dsParameters) {
            this.GenericGetProcedureAsync(sSessionId, dsParameters, null);
        }
        
        /// <remarks/>
        public void GenericGetProcedureAsync(string sSessionId, System.Data.DataSet dsParameters, object userState) {
            if ((this.GenericGetProcedureOperationCompleted == null)) {
                this.GenericGetProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenericGetProcedureOperationCompleted);
            }
            this.InvokeAsync("GenericGetProcedure", new object[] {
                        sSessionId,
                        dsParameters}, this.GenericGetProcedureOperationCompleted, userState);
        }
        
        private void OnGenericGetProcedureOperationCompleted(object arg) {
            if ((this.GenericGetProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenericGetProcedureCompleted(this, new GenericGetProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenericSetProcedure", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GenericSetProcedure(string sSessionId, System.Data.DataSet dsParameters, string sHeader) {
            object[] results = this.Invoke("GenericSetProcedure", new object[] {
                        sSessionId,
                        dsParameters,
                        sHeader});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGenericSetProcedure(string sSessionId, System.Data.DataSet dsParameters, string sHeader, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenericSetProcedure", new object[] {
                        sSessionId,
                        dsParameters,
                        sHeader}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGenericSetProcedure(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GenericSetProcedureAsync(string sSessionId, System.Data.DataSet dsParameters, string sHeader) {
            this.GenericSetProcedureAsync(sSessionId, dsParameters, sHeader, null);
        }
        
        /// <remarks/>
        public void GenericSetProcedureAsync(string sSessionId, System.Data.DataSet dsParameters, string sHeader, object userState) {
            if ((this.GenericSetProcedureOperationCompleted == null)) {
                this.GenericSetProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenericSetProcedureOperationCompleted);
            }
            this.InvokeAsync("GenericSetProcedure", new object[] {
                        sSessionId,
                        dsParameters,
                        sHeader}, this.GenericSetProcedureOperationCompleted, userState);
        }
        
        private void OnGenericSetProcedureOperationCompleted(object arg) {
            if ((this.GenericSetProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenericSetProcedureCompleted(this, new GenericSetProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QBAddInvoice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QBAddInvoice(string sSessionId, string sBatchId_ItemCode) {
            this.Invoke("QBAddInvoice", new object[] {
                        sSessionId,
                        sBatchId_ItemCode});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQBAddInvoice(string sSessionId, string sBatchId_ItemCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QBAddInvoice", new object[] {
                        sSessionId,
                        sBatchId_ItemCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndQBAddInvoice(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void QBAddInvoiceAsync(string sSessionId, string sBatchId_ItemCode) {
            this.QBAddInvoiceAsync(sSessionId, sBatchId_ItemCode, null);
        }
        
        /// <remarks/>
        public void QBAddInvoiceAsync(string sSessionId, string sBatchId_ItemCode, object userState) {
            if ((this.QBAddInvoiceOperationCompleted == null)) {
                this.QBAddInvoiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQBAddInvoiceOperationCompleted);
            }
            this.InvokeAsync("QBAddInvoice", new object[] {
                        sSessionId,
                        sBatchId_ItemCode}, this.QBAddInvoiceOperationCompleted, userState);
        }
        
        private void OnQBAddInvoiceOperationCompleted(object arg) {
            if ((this.QBAddInvoiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QBAddInvoiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(string sSessionId, string sTo, string sAttach, string sSubject) {
            object[] results = this.Invoke("SendMail", new object[] {
                        sSessionId,
                        sTo,
                        sAttach,
                        sSubject});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMail(string sSessionId, string sTo, string sAttach, string sSubject, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMail", new object[] {
                        sSessionId,
                        sTo,
                        sAttach,
                        sSubject}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSendMail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(string sSessionId, string sTo, string sAttach, string sSubject) {
            this.SendMailAsync(sSessionId, sTo, sAttach, sSubject, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string sSessionId, string sTo, string sAttach, string sSubject, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        sSessionId,
                        sTo,
                        sAttach,
                        sSubject}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailCancelledDocs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailCancelledDocs(string sSessionId, string Body) {
            object[] results = this.Invoke("SendMailCancelledDocs", new object[] {
                        sSessionId,
                        Body});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMailCancelledDocs(string sSessionId, string Body, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMailCancelledDocs", new object[] {
                        sSessionId,
                        Body}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSendMailCancelledDocs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailCancelledDocsAsync(string sSessionId, string Body) {
            this.SendMailCancelledDocsAsync(sSessionId, Body, null);
        }
        
        /// <remarks/>
        public void SendMailCancelledDocsAsync(string sSessionId, string Body, object userState) {
            if ((this.SendMailCancelledDocsOperationCompleted == null)) {
                this.SendMailCancelledDocsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailCancelledDocsOperationCompleted);
            }
            this.InvokeAsync("SendMailCancelledDocs", new object[] {
                        sSessionId,
                        Body}, this.SendMailCancelledDocsOperationCompleted, userState);
        }
        
        private void OnSendMailCancelledDocsOperationCompleted(object arg) {
            if ((this.SendMailCancelledDocsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCancelledDocsCompleted(this, new SendMailCancelledDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBatchByFax", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendBatchByFax(string sSessionId, System.Data.DataSet dsOrder, string sExt, string sTo, string sSubject, string sFileName) {
            this.Invoke("SendBatchByFax", new object[] {
                        sSessionId,
                        dsOrder,
                        sExt,
                        sTo,
                        sSubject,
                        sFileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendBatchByFax(string sSessionId, System.Data.DataSet dsOrder, string sExt, string sTo, string sSubject, string sFileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendBatchByFax", new object[] {
                        sSessionId,
                        dsOrder,
                        sExt,
                        sTo,
                        sSubject,
                        sFileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendBatchByFax(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendBatchByFaxAsync(string sSessionId, System.Data.DataSet dsOrder, string sExt, string sTo, string sSubject, string sFileName) {
            this.SendBatchByFaxAsync(sSessionId, dsOrder, sExt, sTo, sSubject, sFileName, null);
        }
        
        /// <remarks/>
        public void SendBatchByFaxAsync(string sSessionId, System.Data.DataSet dsOrder, string sExt, string sTo, string sSubject, string sFileName, object userState) {
            if ((this.SendBatchByFaxOperationCompleted == null)) {
                this.SendBatchByFaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBatchByFaxOperationCompleted);
            }
            this.InvokeAsync("SendBatchByFax", new object[] {
                        sSessionId,
                        dsOrder,
                        sExt,
                        sTo,
                        sSubject,
                        sFileName}, this.SendBatchByFaxOperationCompleted, userState);
        }
        
        private void OnSendBatchByFaxOperationCompleted(object arg) {
            if ((this.SendBatchByFaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBatchByFaxCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBatchByFax1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendBatchByFax1(string sSessionId, string sFileName, string sTo, string sSubject) {
            this.Invoke("SendBatchByFax1", new object[] {
                        sSessionId,
                        sFileName,
                        sTo,
                        sSubject});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendBatchByFax1(string sSessionId, string sFileName, string sTo, string sSubject, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendBatchByFax1", new object[] {
                        sSessionId,
                        sFileName,
                        sTo,
                        sSubject}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendBatchByFax1(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendBatchByFax1Async(string sSessionId, string sFileName, string sTo, string sSubject) {
            this.SendBatchByFax1Async(sSessionId, sFileName, sTo, sSubject, null);
        }
        
        /// <remarks/>
        public void SendBatchByFax1Async(string sSessionId, string sFileName, string sTo, string sSubject, object userState) {
            if ((this.SendBatchByFax1OperationCompleted == null)) {
                this.SendBatchByFax1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBatchByFax1OperationCompleted);
            }
            this.InvokeAsync("SendBatchByFax1", new object[] {
                        sSessionId,
                        sFileName,
                        sTo,
                        sSubject}, this.SendBatchByFax1OperationCompleted, userState);
        }
        
        private void OnSendBatchByFax1OperationCompleted(object arg) {
            if ((this.SendBatchByFax1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBatchByFax1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendDocument(string sSessionId, string sTemplatePath, string sSendPath, string sFileExt, int iOrderCode, int iBatchCode, int iItemCode, System.Data.DataSet dsBatch, System.Data.DataSet dsItem, System.Data.DataSet dsItemType, string sDocChar, System.Data.DataSet dsShape) {
            this.Invoke("SendDocument", new object[] {
                        sSessionId,
                        sTemplatePath,
                        sSendPath,
                        sFileExt,
                        iOrderCode,
                        iBatchCode,
                        iItemCode,
                        dsBatch,
                        dsItem,
                        dsItemType,
                        sDocChar,
                        dsShape});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendDocument(string sSessionId, string sTemplatePath, string sSendPath, string sFileExt, int iOrderCode, int iBatchCode, int iItemCode, System.Data.DataSet dsBatch, System.Data.DataSet dsItem, System.Data.DataSet dsItemType, string sDocChar, System.Data.DataSet dsShape, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendDocument", new object[] {
                        sSessionId,
                        sTemplatePath,
                        sSendPath,
                        sFileExt,
                        iOrderCode,
                        iBatchCode,
                        iItemCode,
                        dsBatch,
                        dsItem,
                        dsItemType,
                        sDocChar,
                        dsShape}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendDocument(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sSessionId, string sTemplatePath, string sSendPath, string sFileExt, int iOrderCode, int iBatchCode, int iItemCode, System.Data.DataSet dsBatch, System.Data.DataSet dsItem, System.Data.DataSet dsItemType, string sDocChar, System.Data.DataSet dsShape) {
            this.SendDocumentAsync(sSessionId, sTemplatePath, sSendPath, sFileExt, iOrderCode, iBatchCode, iItemCode, dsBatch, dsItem, dsItemType, sDocChar, dsShape, null);
        }
        
        /// <remarks/>
        public void SendDocumentAsync(string sSessionId, string sTemplatePath, string sSendPath, string sFileExt, int iOrderCode, int iBatchCode, int iItemCode, System.Data.DataSet dsBatch, System.Data.DataSet dsItem, System.Data.DataSet dsItemType, string sDocChar, System.Data.DataSet dsShape, object userState) {
            if ((this.SendDocumentOperationCompleted == null)) {
                this.SendDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendDocumentOperationCompleted);
            }
            this.InvokeAsync("SendDocument", new object[] {
                        sSessionId,
                        sTemplatePath,
                        sSendPath,
                        sFileExt,
                        iOrderCode,
                        iBatchCode,
                        iItemCode,
                        dsBatch,
                        dsItem,
                        dsItemType,
                        sDocChar,
                        dsShape}, this.SendDocumentOperationCompleted, userState);
        }
        
        private void OnSendDocumentOperationCompleted(object arg) {
            if ((this.SendDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddGraderData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime AddGraderData(string sSessionId, string sPath, string sPartID, out string rid) {
            object[] results = this.Invoke("AddGraderData", new object[] {
                        sSessionId,
                        sPath,
                        sPartID});
            rid = ((string)(results[1]));
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddGraderData(string sSessionId, string sPath, string sPartID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddGraderData", new object[] {
                        sSessionId,
                        sPath,
                        sPartID}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndAddGraderData(System.IAsyncResult asyncResult, out string rid) {
            object[] results = this.EndInvoke(asyncResult);
            rid = ((string)(results[1]));
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void AddGraderDataAsync(string sSessionId, string sPath, string sPartID) {
            this.AddGraderDataAsync(sSessionId, sPath, sPartID, null);
        }
        
        /// <remarks/>
        public void AddGraderDataAsync(string sSessionId, string sPath, string sPartID, object userState) {
            if ((this.AddGraderDataOperationCompleted == null)) {
                this.AddGraderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddGraderDataOperationCompleted);
            }
            this.InvokeAsync("AddGraderData", new object[] {
                        sSessionId,
                        sPath,
                        sPartID}, this.AddGraderDataOperationCompleted, userState);
        }
        
        private void OnAddGraderDataOperationCompleted(object arg) {
            if ((this.AddGraderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddGraderDataCompleted(this, new AddGraderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPrices", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime AddPrices(string sSessionId, string sPath, System.Data.DataSet dsCodes, System.Data.DataSet dsData, out string rid) {
            object[] results = this.Invoke("AddPrices", new object[] {
                        sSessionId,
                        sPath,
                        dsCodes,
                        dsData});
            rid = ((string)(results[1]));
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPrices(string sSessionId, string sPath, System.Data.DataSet dsCodes, System.Data.DataSet dsData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPrices", new object[] {
                        sSessionId,
                        sPath,
                        dsCodes,
                        dsData}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndAddPrices(System.IAsyncResult asyncResult, out string rid) {
            object[] results = this.EndInvoke(asyncResult);
            rid = ((string)(results[1]));
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void AddPricesAsync(string sSessionId, string sPath, System.Data.DataSet dsCodes, System.Data.DataSet dsData) {
            this.AddPricesAsync(sSessionId, sPath, dsCodes, dsData, null);
        }
        
        /// <remarks/>
        public void AddPricesAsync(string sSessionId, string sPath, System.Data.DataSet dsCodes, System.Data.DataSet dsData, object userState) {
            if ((this.AddPricesOperationCompleted == null)) {
                this.AddPricesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPricesOperationCompleted);
            }
            this.InvokeAsync("AddPrices", new object[] {
                        sSessionId,
                        sPath,
                        dsCodes,
                        dsData}, this.AddPricesOperationCompleted, userState);
        }
        
        private void OnAddPricesOperationCompleted(object arg) {
            if ((this.AddPricesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPricesCompleted(this, new AddPricesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGraderDir", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGraderDir(string sSessionId) {
            object[] results = this.Invoke("GetGraderDir", new object[] {
                        sSessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGraderDir(string sSessionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGraderDir", new object[] {
                        sSessionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetGraderDir(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGraderDirAsync(string sSessionId) {
            this.GetGraderDirAsync(sSessionId, null);
        }
        
        /// <remarks/>
        public void GetGraderDirAsync(string sSessionId, object userState) {
            if ((this.GetGraderDirOperationCompleted == null)) {
                this.GetGraderDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGraderDirOperationCompleted);
            }
            this.InvokeAsync("GetGraderDir", new object[] {
                        sSessionId}, this.GetGraderDirOperationCompleted, userState);
        }
        
        private void OnGetGraderDirOperationCompleted(object arg) {
            if ((this.GetGraderDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGraderDirCompleted(this, new GetGraderDirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGraderKeymap", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGraderKeymap(string sSessionId, string sFileName) {
            object[] results = this.Invoke("GetGraderKeymap", new object[] {
                        sSessionId,
                        sFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGraderKeymap(string sSessionId, string sFileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGraderKeymap", new object[] {
                        sSessionId,
                        sFileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetGraderKeymap(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGraderKeymapAsync(string sSessionId, string sFileName) {
            this.GetGraderKeymapAsync(sSessionId, sFileName, null);
        }
        
        /// <remarks/>
        public void GetGraderKeymapAsync(string sSessionId, string sFileName, object userState) {
            if ((this.GetGraderKeymapOperationCompleted == null)) {
                this.GetGraderKeymapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGraderKeymapOperationCompleted);
            }
            this.InvokeAsync("GetGraderKeymap", new object[] {
                        sSessionId,
                        sFileName}, this.GetGraderKeymapOperationCompleted, userState);
        }
        
        private void OnGetGraderKeymapOperationCompleted(object arg) {
            if ((this.GetGraderKeymapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGraderKeymapCompleted(this, new GetGraderKeymapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceCfgParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceCfgParameter(string sSessionId, string sParameter) {
            object[] results = this.Invoke("GetServiceCfgParameter", new object[] {
                        sSessionId,
                        sParameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceCfgParameter(string sSessionId, string sParameter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceCfgParameter", new object[] {
                        sSessionId,
                        sParameter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServiceCfgParameter(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceCfgParameterAsync(string sSessionId, string sParameter) {
            this.GetServiceCfgParameterAsync(sSessionId, sParameter, null);
        }
        
        /// <remarks/>
        public void GetServiceCfgParameterAsync(string sSessionId, string sParameter, object userState) {
            if ((this.GetServiceCfgParameterOperationCompleted == null)) {
                this.GetServiceCfgParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceCfgParameterOperationCompleted);
            }
            this.InvokeAsync("GetServiceCfgParameter", new object[] {
                        sSessionId,
                        sParameter}, this.GetServiceCfgParameterOperationCompleted, userState);
        }
        
        private void OnGetServiceCfgParameterOperationCompleted(object arg) {
            if ((this.GetServiceCfgParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceCfgParameterCompleted(this, new GetServiceCfgParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MoveFileToSendDir", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveFileToSendDir(string sSessionId, string sFileName) {
            this.Invoke("MoveFileToSendDir", new object[] {
                        sSessionId,
                        sFileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveFileToSendDir(string sSessionId, string sFileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveFileToSendDir", new object[] {
                        sSessionId,
                        sFileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveFileToSendDir(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveFileToSendDirAsync(string sSessionId, string sFileName) {
            this.MoveFileToSendDirAsync(sSessionId, sFileName, null);
        }
        
        /// <remarks/>
        public void MoveFileToSendDirAsync(string sSessionId, string sFileName, object userState) {
            if ((this.MoveFileToSendDirOperationCompleted == null)) {
                this.MoveFileToSendDirOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveFileToSendDirOperationCompleted);
            }
            this.InvokeAsync("MoveFileToSendDir", new object[] {
                        sSessionId,
                        sFileName}, this.MoveFileToSendDirOperationCompleted, userState);
        }
        
        private void OnMoveFileToSendDirOperationCompleted(object arg) {
            if ((this.MoveFileToSendDirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveFileToSendDirCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMeasuresFormats", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetMeasuresFormats() {
            object[] results = this.Invoke("GetMeasuresFormats", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMeasuresFormats(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMeasuresFormats", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetMeasuresFormats(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetMeasuresFormatsAsync() {
            this.GetMeasuresFormatsAsync(null);
        }
        
        /// <remarks/>
        public void GetMeasuresFormatsAsync(object userState) {
            if ((this.GetMeasuresFormatsOperationCompleted == null)) {
                this.GetMeasuresFormatsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeasuresFormatsOperationCompleted);
            }
            this.InvokeAsync("GetMeasuresFormats", new object[0], this.GetMeasuresFormatsOperationCompleted, userState);
        }
        
        private void OnGetMeasuresFormatsOperationCompleted(object arg) {
            if ((this.GetMeasuresFormatsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeasuresFormatsCompleted(this, new GetMeasuresFormatsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AsincPrint", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AsincPrint(string sSessionId, System.Data.DataSet dsChecked, string sDocId) {
            this.Invoke("AsincPrint", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAsincPrint(string sSessionId, System.Data.DataSet dsChecked, string sDocId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AsincPrint", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAsincPrint(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AsincPrintAsync(string sSessionId, System.Data.DataSet dsChecked, string sDocId) {
            this.AsincPrintAsync(sSessionId, dsChecked, sDocId, null);
        }
        
        /// <remarks/>
        public void AsincPrintAsync(string sSessionId, System.Data.DataSet dsChecked, string sDocId, object userState) {
            if ((this.AsincPrintOperationCompleted == null)) {
                this.AsincPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAsincPrintOperationCompleted);
            }
            this.InvokeAsync("AsincPrint", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId}, this.AsincPrintOperationCompleted, userState);
        }
        
        private void OnAsincPrintOperationCompleted(object arg) {
            if ((this.AsincPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AsincPrintCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MakeTextFile3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MakeTextFile3(string sSessionId, System.Data.DataSet dsChecked, string sDocId) {
            this.Invoke("MakeTextFile3", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMakeTextFile3(string sSessionId, System.Data.DataSet dsChecked, string sDocId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MakeTextFile3", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMakeTextFile3(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MakeTextFile3Async(string sSessionId, System.Data.DataSet dsChecked, string sDocId) {
            this.MakeTextFile3Async(sSessionId, dsChecked, sDocId, null);
        }
        
        /// <remarks/>
        public void MakeTextFile3Async(string sSessionId, System.Data.DataSet dsChecked, string sDocId, object userState) {
            if ((this.MakeTextFile3OperationCompleted == null)) {
                this.MakeTextFile3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeTextFile3OperationCompleted);
            }
            this.InvokeAsync("MakeTextFile3", new object[] {
                        sSessionId,
                        dsChecked,
                        sDocId}, this.MakeTextFile3OperationCompleted, userState);
        }
        
        private void OnMakeTextFile3OperationCompleted(object arg) {
            if ((this.MakeTextFile3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeTextFile3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PrintExcelReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintExcelReport(string ReportName, string DataFileName, string TempFile) {
            object[] results = this.Invoke("PrintExcelReport", new object[] {
                        ReportName,
                        DataFileName,
                        TempFile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrintExcelReport(string ReportName, string DataFileName, string TempFile, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PrintExcelReport", new object[] {
                        ReportName,
                        DataFileName,
                        TempFile}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndPrintExcelReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintExcelReportAsync(string ReportName, string DataFileName, string TempFile) {
            this.PrintExcelReportAsync(ReportName, DataFileName, TempFile, null);
        }
        
        /// <remarks/>
        public void PrintExcelReportAsync(string ReportName, string DataFileName, string TempFile, object userState) {
            if ((this.PrintExcelReportOperationCompleted == null)) {
                this.PrintExcelReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintExcelReportOperationCompleted);
            }
            this.InvokeAsync("PrintExcelReport", new object[] {
                        ReportName,
                        DataFileName,
                        TempFile}, this.PrintExcelReportOperationCompleted, userState);
        }
        
        private void OnPrintExcelReportOperationCompleted(object arg) {
            if ((this.PrintExcelReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintExcelReportCompleted(this, new PrintExcelReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsAccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void ConsoleLoginCompletedEventHandler(object sender, ConsoleLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsoleLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsoleLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet dsAccess {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetOfficeDepartmentsCompletedEventHandler(object sender, GetOfficeDepartmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfficeDepartmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfficeDepartmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetOfficeCodeCompletedEventHandler(object sender, GetOfficeCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfficeCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfficeCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void LogoffCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetDepartmentOfficeIdCompletedEventHandler(object sender, SetDepartmentOfficeIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDepartmentOfficeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDepartmentOfficeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetImageCompletedEventHandler(object sender, GetImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetCorelFileCompletedEventHandler(object sender, GetCorelFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCorelFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCorelFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GenericGetByIdCompletedEventHandler(object sender, GenericGetByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenericGetByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenericGetByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GenericGetProcedureCompletedEventHandler(object sender, GenericGetProcedureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenericGetProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenericGetProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GenericSetProcedureCompletedEventHandler(object sender, GenericSetProcedureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenericSetProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenericSetProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void QBAddInvoiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendMailCancelledDocsCompletedEventHandler(object sender, SendMailCancelledDocsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCancelledDocsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCancelledDocsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendBatchByFaxCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendBatchByFax1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SendDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddGraderDataCompletedEventHandler(object sender, AddGraderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddGraderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddGraderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AddPricesCompletedEventHandler(object sender, AddPricesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPricesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPricesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string rid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetGraderDirCompletedEventHandler(object sender, GetGraderDirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGraderDirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGraderDirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetGraderKeymapCompletedEventHandler(object sender, GetGraderKeymapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGraderKeymapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGraderKeymapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetServiceCfgParameterCompletedEventHandler(object sender, GetServiceCfgParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceCfgParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceCfgParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void MoveFileToSendDirCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetMeasuresFormatsCompletedEventHandler(object sender, GetMeasuresFormatsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeasuresFormatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeasuresFormatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void AsincPrintCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void MakeTextFile3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void PrintExcelReportCompletedEventHandler(object sender, PrintExcelReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintExcelReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintExcelReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591